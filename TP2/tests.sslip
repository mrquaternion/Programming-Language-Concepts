; #### Tests typés correctement ####

(fix (((even (x Num)) (if (= x 0) true (odd (- x 1)))) ((odd (x Num)) (if (= x 0) false (even (- x 1))))) (odd 42))

(fix (((f (x Num)) (Num -> Bool) (fob ((y Num)) (if (= x y) true ((f (- x 1)) y))))) ((f 15) 10))

(fix (
  ((f (x Num)) (Num -> Bool) 
    (fob ((y Num)) 
      (if (≥ x y) 
          ((f (/ x 2)) y) 
          false)))
) 
((f 20) 10)) ; ↝ Tbool False

(let x (: 42 Num) 
    (: (+ x 3) Num)) ; ↝ Tnum 45

(fix (
    (myfunc (fob ((x Num) (y Num)) 
                (if (= x y) true false)))
) 
(myfunc 1 1)) ; ↝ Tbool True

(fix (
    ((triple (a Num)) Num 
            (+ (+ a a) a))
    ((somme (x Num) (y Num)) Bool 
            (: (if (= (+ x y) 3) true false) Bool))
) 
(somme (triple 1) 1)) ; ↝ Tbool False

(fix (
    (myfunc (fob ((y Num)) 
                  (: (if (> y 2) 100 1) Num)))
) 
(let x (: (* 2 (myfunc 3)) Num) 
    (: (+ x 2) Num))) ; ↝ Tnum 202

(fix (
    (e2 (fob ((y Num)) 
              (: (if (≥ y 4) true false) Bool)))
    (e1 (fob ((x Num)) 
              (: (e2 x) Bool)))
) 
(e1 5)) ; ↝ Tbool True

